#!/usr/bin/env bash

# Function to create a directory and change into it (enhanced error handling)
mkd() {
    mkdir -p "$@" && cd "$@" || { echo "Error creating directory or changing into it."; return 1; }
}

# Function to change to the topmost Finder window directory (improved reliability)
cdf() { 
    cd "$(osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then POSIX path of (target of front Finder window as alias) else POSIX path of (desktop as alias) end if')" || { echo "No Finder window found."; return 1; }
}

# Function to create a .tar.gz archive (simplified compression logic, added error handling)
targz() {
    local tmpFile="${@%/}.tar"
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "$@" || return 1

    local compressor="gzip"  # Default to gzip
    if (( $(stat -f "%z" "${tmpFile}") < 52428800 )) && hash zopfli 2>/dev/null; then
        compressor="zopfli"  # Use zopfli if available and file is small
    elif hash pigz 2>/dev/null; then
        compressor="pigz"    # Use pigz if available
    fi

    echo "Compressing .tar ($(( $(stat -f "%z" "${tmpFile}") / 1000 )) kB) using '${compressor}'..."
    "${compressor}" -v "${tmpFile}" || return 1
    rm "${tmpFile}"

    echo "${tmpFile}.gz ($(( $(stat -f "%z" "${tmpFile}.gz") / 1000 )) kB) created successfully."
}

# Function to determine file/directory size (simplified, using 'g' flag for better readability)
fs() {
    du -shg "$@"
}

# Use Git's colored diff if available (unchanged)
if hash git &>/dev/null; then
    diff() {
        git diff --no-index --color-words "$@"
    }
fi

# Function to create a data URL (no changes needed)
dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Function to start an HTTP server (updated for Python 3, simplified content type)
server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    python3 -m http.server "$port" --bind 127.0.0.1
}

# Function to start a PHP server (no changes needed, requires PHP 5.4+)
phpserver() {
    local port="${1:-4000}"
    local ip=$(ipconfig getifaddr en1)
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}"
}


# Compare original and gzipped file size
gz() {
    local origsize=$(wc -c < "$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Run `dig` and display the most useful info
digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# Show all the names (CNs and SANs) listed in the SSL certificate for a given domain
getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified."
        return 1
    fi

    local domain="${1}"
    echo "Testing ${domain}..."
    echo "" # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, no_serial, no_sigdump, no_signame, no_validity, no_version")
        echo "Common Name:"
        echo "" # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
        echo "" # newline
        echo "Subject Alternative Name(s):"
        echo "" # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
        return 0
    else
        echo "ERROR: Certificate not found."
        return 1
    fi
}

# Normalize `open` across Linux, macOS, and Windows (unchanged)
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        alias open='explorer.exe'
    else
        alias open='xdg-open'
    fi
fi


# Open current directory or given location
function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
}

# Tree view with hidden files, color, and sorted output
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}
